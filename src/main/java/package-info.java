/*
 * Singleton:   Применен в классе Controller, потому что контроллер это по сути наше единственное подключение
 * к процессору, который уже в свою очередь выполняет программу. Т.к. это подключение, то у него должен быть
 * единственный экземпляр и единственная точка входа. Но реализовал я кажется криво :)
 * Factory:     Применен в виде абстрактной фабрики - класса Generator, т.к. каждый из наследников этого класса
 * генерирует новый объект другого класса.
 * Builder:     Применен для класса Person, потому что у этого класса всегда должен быть заполнен id, и далее
 * в зависимости от введенного id строятся следующие поля этого класса (person строится по кусочкам).
 * Adapter:     Не применен, потому что не нашел таких объектов, которым бы требовалось применить действие не
 * из своего класса или не из класса родителя.
 * Bridge:      Не применен, потому что в нашем случае в задаче на выходе выдаются совершенно одинаковые person,
 * которые ничем по наличию тех или иных полей не отличаются друг от друга. Т.е. у нас нет, например,  personWithoutPhone.
 * Facade:      Применен в классе AppearenceGenerator, в котором не видно логики, как присваиваются цвет и длина
 * волос объекту класса Hair.
 * DTO:         Применен в классе FioGenerator, потому что вы так подсказали в лекции :) Шутка) На самом деле
 * применен, потому что у всех людей в нашей "базе" есть ФИО, поэтому нет смысла заводить Имя, фамилию и отчество
 * в отдельные переменные, когда у нас есть целый класс Fio, содержащий в себе сразу 3 нужных нам поля.
 * Шаблон:      Не применен, потому что не нашел, чье "поведение" нужно было изменять. Может быть нужно было делать
 * шаблон Генератора вместо того, чтобы делать его абстрактной фабрикой.
 */